import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop } from './client.88db9c0b.js';

/* src/routes/index.svelte generated by Svelte v3.25.1 */

const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let figure;
	let img;
	let img_src_value;
	let t1;
	let a0;
	let t2;
	let t3;
	let a1;
	let t4;
	let t5;
	let a2;
	let t6;
	let t7;
	let a3;
	let t8;

	const block = {
		c: function create() {
			t0 = space();
			figure = element("figure");
			img = element("img");
			t1 = space();
			a0 = element("a");
			t2 = text("GITHUB");
			t3 = space();
			a1 = element("a");
			t4 = text("TELEGRAM");
			t5 = space();
			a2 = element("a");
			t6 = text("TWITTER");
			t7 = space();
			a3 = element("a");
			t8 = text("FACEBOOK");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1n49sp7\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { alt: true, src: true, class: true });
			figure_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			a0 = claim_element(nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t2 = claim_text(a0_nodes, "GITHUB");
			a0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			a1 = claim_element(nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, "TELEGRAM");
			a1_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			a2 = claim_element(nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t6 = claim_text(a2_nodes, "TWITTER");
			a2_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			a3 = claim_element(nodes, "A", { href: true, class: true });
			var a3_nodes = children(a3);
			t8 = claim_text(a3_nodes, "FACEBOOK");
			a3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "JODC";
			attr_dev(img, "alt", "JODC Logo");
			if (img.src !== (img_src_value = "jodcLogoWB.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1phm4y7");
			add_location(img, file, 26, 8, 333);
			attr_dev(figure, "class", "svelte-1phm4y7");
			add_location(figure, file, 26, 0, 325);
			attr_dev(a0, "href", "https://github.com/jiitodc");
			attr_dev(a0, "class", "svelte-1phm4y7");
			add_location(a0, file, 29, 0, 430);
			attr_dev(a1, "href", "https://t.me/jiitodc");
			attr_dev(a1, "class", "svelte-1phm4y7");
			add_location(a1, file, 30, 0, 478);
			attr_dev(a2, "href", "https://twitter.com/jiitodc");
			attr_dev(a2, "class", "svelte-1phm4y7");
			add_location(a2, file, 31, 0, 522);
			attr_dev(a3, "href", "https://www.facebook.com/groups/jiitodc");
			attr_dev(a3, "class", "svelte-1phm4y7");
			add_location(a3, file, 32, 0, 572);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, figure, anchor);
			append_dev(figure, img);
			insert_dev(target, t1, anchor);
			insert_dev(target, a0, anchor);
			append_dev(a0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, a1, anchor);
			append_dev(a1, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, a2, anchor);
			append_dev(a2, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, a3, anchor);
			append_dev(a3, t8);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(figure);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(a2);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(a3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTQ2ZTgzMGEuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
